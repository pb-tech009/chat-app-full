# .gitlab-ci.yml - monorepo (frontend, backend, jobs) -> build/push -> deploy to k8s
image: docker:24.0.2

variables:
  DOCKER_DRIVER: overlay2
  # Force docker in docker service
  DOCKER_TLS_CERTDIR: "/certs"
  CONTAINER_RELEASE_TAG: "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
  K8S_NAMESPACE: "staging"       # default, override in variables for production
  KUBECTL_VERSION: "v1.28.0"

stages:
  - validate
  - lint
  - build
  - test
  - publish
  - deploy
  - post-deploy
  - promote

# Use docker:dind service so we can build & push images
services:
  - name: docker:24.0.2-dind
    alias: docker

before_script:
  - apk add --no-cache bash curl jq python3 py3-pip git openssh-client
  - export PATH=$PATH:/usr/local/bin
  # Docker login using CI registry credentials (GitLab predefined variables)
  - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"



# === METRICS SERVER SETUP ===
setup-metrics-server:
  stage: validate
  image: bitnami/kubectl:1.28
  script:
    # Decode kubeconfig
    - echo "$KUBECONFIG_BASE64" | base64 -d > kubeconfig
    - export KUBECONFIG=$PWD/kubeconfig

    - echo "⚙️ Applying Metrics Server for Kind..."
    - kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
    - kubectl apply -f k8s/metrix-server-kind.yml

    - echo "🕒 Waiting for Metrics Server to be ready..."
    - kubectl rollout status deployment metrics-server -n kube-system --timeout=120s || {
        echo "❌ Metrics Server failed to start";
        kubectl get pods -n kube-system;
        exit 1;
      }

    - echo "✅ Metrics Server is up and running."
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


# === VERTICAL POD AUTOSCALER SETUP ===
setup-autoscalers:
  stage: validate
  image: bitnami/kubectl:1.28
  script:
    - echo "$KUBECONFIG_BASE64" | base64 -d > kubeconfig
    - export KUBECONFIG=$PWD/kubeconfig

    - echo "⚙️ Installing Vertical Pod Autoscaler (VPA)..."
    - kubectl apply -f https://raw.githubusercontent.com/kubernetes/autoscaler/master/vertical-pod-autoscaler/deploy/vpa-v1-crd-gen.yaml
    - kubectl apply -f https://raw.githubusercontent.com/kubernetes/autoscaler/master/vertical-pod-autoscaler/deploy/vpa-rbac.yaml
    - kubectl apply -f https://raw.githubusercontent.com/kubernetes/autoscaler/master/vertical-pod-autoscaler/deploy/vpa-updater-deployment.yaml
    - kubectl apply -f https://raw.githubusercontent.com/kubernetes/autoscaler/master/vertical-pod-autoscaler/deploy/vpa-admission-controller-deployment.yaml
    - kubectl apply -f https://raw.githubusercontent.com/kubernetes/autoscaler/master/vertical-pod-autoscaler/deploy/vpa-recommender-deployment.yaml

    - echo "🕒 Waiting for VPA components to start..."
    - kubectl rollout status deployment vpa-updater -n kube-system --timeout=120s || true
    - kubectl rollout status deployment vpa-recommender -n kube-system --timeout=120s || true
    - kubectl rollout status deployment vpa-admission-controller -n kube-system --timeout=120s || true

    - echo "✅ VPA setup complete."
  needs:
    - setup-metrics-server
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

k8s-apply:
  stage: validate
  image: bitnami/kubectl:1.28
  script:
    # Decode and set up kubeconfig from GitLab variable
    - echo "$KUBECONFIG_BASE64" | base64 -d > kubeconfig
    - export KUBECONFIG=$PWD/kubeconfig

    # Apply YAML files in your exact order
    - echo "🚀 Applying Kubernetes YAMLs in order..."
    - kubectl apply -f k8s/namespace.yml
    - kubectl apply -f k8s/chatapp-secrets.yml
    - kubectl apply -f k8s/mongodb-deployment.yml
    - kubectl apply -f k8s/mongodb-service.yml
    - kubectl apply -f k8s/mongodb-VPA.yml
    - kubectl apply -f k8s/backend-deployment.yml
    - kubectl apply -f k8s/backend-service.yml
    - kubectl apply -f k8s/backend-HPA.yml
    - kubectl apply -f k8s/frontend-deployment.yml
    - kubectl apply -f k8s/frontend-service.yml
    - kubectl apply -f k8s/frontend-HPA.yml
    
    # --- Jobs (order-specific) ---
    - echo "🚀 Applying Kubernetes Jobs (PV → PVC → Secrets → ConfigMaps → Jobs → CronJobs)..."
    - kubectl apply -f jobs/01-apv.yml
    - kubectl apply -f jobs/01-backup-pvc.yml
    - kubectl apply -f jobs/02-job-secret.yml
    - kubectl apply -f jobs/02-mongo-seed-configmap.yml
    - kubectl apply -f jobs/03-mongo-seed-job.yml
    - kubectl apply -f jobs/04-db-migration-configmap.yml
    - kubectl apply -f jobs/05-db-migration-job.yml
    - kubectl apply -f jobs/06-mongodb-backup-cronjob.yml
    - kubectl apply -f jobs/07-log-cleanup-cronjob.yml
    - kubectl apply -f jobs/08-mongodb-restore-job.yml
    - kubectl apply -f jobs/09-image-cleanup-cronjob.yml
    - kubectl apply -f jobs/10-notification-cronjob.yml
    - kubectl apply -f jobs/11-metrics-exporter-cronjob.yml
    - kubectl apply -f jobs/11-notification-retry-configmap.yml
    - kubectl apply -f jobs/12-cleanup-failed-pods-cronjob.yml

  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


# optional linter for dockerfiles (hadolint)
lint-dockerfiles:
  stage: lint
  image: hadolint/hadolint:latest
  script:
    - echo "Linting Dockerfiles"
    - find . -type f -name Dockerfile -o -name 'Dockerfile.*' -print0 | xargs -0 -n1 -I{} sh -c 'hadolint {} || true'
  rules:
    - changes:
      - '**/Dockerfile'
      - '**/Dockerfile.*'
  allow_failure: true


# === BUILD BACKEND ===
build-backend:
  stage: build
  image: docker:24.0.2
  variables:
    IMAGE: "$CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA"
  script:
    - cd backend
    - docker build -t "$IMAGE" .
    - docker push "$IMAGE"
    - mkdir -p ../built_images
    - echo "$IMAGE" > ../built_images/backend.txt
  artifacts:
    paths:
      - built_images/backend.txt
    expire_in: 1h
  rules:
    - changes:
        - backend/**/*
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


# === BUILD FRONTEND ===
build-frontend:
  stage: build
  image: docker:24.0.2
  variables:
    IMAGE: "$CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA"
  script:
    - cd frontend
    - docker build -t "$IMAGE" .
    - docker push "$IMAGE"
    - mkdir -p ../built_images
    - echo "$IMAGE" > ../built_images/frontend.txt
  artifacts:
    paths:
      - built_images/frontend.txt
    expire_in: 1h
  rules:
    - changes:
        - frontend/**/*
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Run unit tests if any (these are placeholders — you must adapt)
test-backend:
  stage: test
  image: node:20
  script:
    - cd backend
    - if [ -f package.json ]; then npm ci && npm test; else echo "no tests"; fi
  rules:
    - changes:
      - backend/**/*
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  allow_failure: false


# Publish metadata (optional)
publish-manifest:
  stage: publish
  image: alpine:latest
  script:
    - mkdir -p release
    - echo "images:" > release/images.yml
    - |
      for f in built_images/*.txt; do
        comp=$(basename "$f" .txt)
        echo "$comp: $(cat "$f")" >> release/images.yml
      done
  artifacts:
    paths:
      - release/images.yml
    expire_in: 1d
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'


# Deploy to staging (automated)
deploy-staging:
  stage: deploy
  image: bitnami/kubectl:1.28
  script:
    # decode KUBECONFIG_BASE64 environment variable set in GitLab CI project variables
    - echo "$KUBECONFIG_BASE64" | base64 -d > kubeconfig
    - export KUBECONFIG=$PWD/kubeconfig
    - kubectl config current-context
    - kubectl -n ${K8S_NAMESPACE} apply -k kubernetes/overlays/staging || kubectl apply -f kubernetes/  # adjust to your layout
    - kubectl -n ${K8S_NAMESPACE} set image deployment/frontend frontend="$CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA" --record || true
    - kubectl -n ${K8S_NAMESPACE} set image deployment/backend backend="$CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA" --record || true
  environment:
    name: staging
    url: http://staging.example.com
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


# Simple smoke test after deploy
smoke-test:
  stage: post-deploy
  image: curlimages/curl:7.87.0
  script:
    - sleep 10
    - curl --fail http://your-staging-url/health || (echo "smoke test failed" && exit 1)
  needs:
    - deploy-staging
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


# Manual promotion to production
promote-production:
  stage: promote
  image: bitnami/kubectl:1.28
  when: manual
  script:
    - echo "$KUBECONFIG_BASE64" | base64 -d > kubeconfig
    - export KUBECONFIG=$PWD/kubeconfig
    - kubectl -n production apply -k kubernetes/overlays/production
    - kubectl -n production set image deployment/frontend frontend="$CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA"
    - kubectl -n production set image deployment/backend backend="$CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA"
  environment:
    name: production
    url: https://your-production.example.com
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

